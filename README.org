
* org-dynamic-agenda

Use =before-save-hook= on org files to dynamically build =org-agenda-files= and speed up =org-agenda=.

You use a lot of small org files. Once you know what you are looking for in an agenda, parsing lots of files on every refresh is a waste of time and resources.

This package will dynamically build a list of =org-agenda-files= worth considering when using =org-agenda= based on the =org-dynamic-agenda-file-p= predicate. This allows for instance to have an ever-extending journal / dailies directory (or project-specific todo / inbox files) where you handle some of your TODOs, but never having to really care about the number of files (except if you change your expectations / your =org-agenda-custom-commands= and have to manually add some =org-agenda-files=).

** Org-ql integration

By default, the package uses the =org-element= API, but when using =(require 'org-ql-dynamic-agenda)=, the =org-ql= backend is used instead. The cache of =org-ql= for the org note is built on save, so using pure =org-ql-block= commands in =org-agenda-custom-commands= should always take about 1/5th of the time of the equivalent =org-agenda=. See [[https://github.com/alphapapa/org-ql/blob/master/README.org#agenda-like-views][org-ql's readme]] for more info. 

To take full advantage of the =org-ql= integration and use pure =org-ql-block= commands, you should =(setq org-agenda-include-diary nil)= and use an equivalent =org-agenda-custom-commands= for the diary (I haven't done it yet, contributions welcome!).

** Configuration

Both values of =org-agenda-files= (a file path or a list of files) are supported, since we use a native =org-agenda= saving method. 

*You should redefine the predicate inside* =org-dynamic-agenda--file-p= *to match what you consider should be your* =org-agenda-files= *.* Usually that would mean matching all the contents you can parse with =org-agenda= commands and =org-agenda-custom-commands=. You can use =pp-eval-expression= to test =(org-dynamic-agenda-file-p)= with open buffers as you modify it.

With =org-ql= integration, =org-agenda-custom-commands= and =org-ql-views= are parsed directly, so you don't even have to define any predicate. It's possible that some parsing errors get in the way at first, please report them if you experience any.

*** Initially defining or redefining =org-agenda-files=

One simple method is to record all possible org files and then cleanup which files are agenda-files. This is the part that will take time. For instance: 

#+begin_src elisp
(defun my/org-dynamic-agenda-init ()
  "(Re)initialize dynamic agenda files.

This can take a long time, so it is recommended to run this only
on installation and when first tasks are added to many files via
methods the save hook cannot detect, like file synchronization."
  (interactive)
  ;; ;; uncomment if storing org-agenda-files in file
  ;; (make-empty-file org-agenda-files 'force)
  (org-store-new-agenda-file-list
   (directory-files-recursively
    org-directory (rx ".org" eos) nil
    ;; ignore hidden directories like .git and .attach
    (lambda (subdir)
      (not (eq ?. (string-to-char (file-name-nondirectory subdir)))))))
  ;; use ql here if desired
  (org-dynamic-agenda-cleanup-files 'full)
  (message "Initialized agenda files"))
#+end_src

To avoid reinitializing =org-agenda-files= every time Emacs starts, you will likely want to set =org-agenda-files= to a single filename to persist =org-agenda-files= across Emacs sessions:
#+begin_src elisp
(setq org-agenda-files
      (expand-file-name "org-agenda-files.txt" (xdg-cache-home)))
#+end_src

** Changelog

It's only getting started!

MAYBE TODO: redefine =org-dynamic-agenda--file-p= to match all possible =org-agenda= commands, current default config is a bit minimalist.

MAYBE TODO: rewrite native =org-agenda= commands in the case of =org-ql= integration, so that all native commands are also 5x faster.

MAYBE TODO: investigate integration with =org-super-agenda=.

** Relation to other files / packages

The original source of inspiration for this package is the post [[https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html][Task management with org-roam Vol. 5: Dynamic and fast agenda]] by Boris Buliga. But since I'd like to use my =org-roam= files for knowledge management and keep task management separate, I decided to make a package out of it to build it.

In the process of writing the package, I discovered [[https://www.armindarvish.com/en/post/emacs_workflow_dynamically_adding_files_to_org-agenda-files/][Armin Darvish's implementation]] which basically does the same thing, on which I added a few improvements (namely: native save, org-ql integration, more general utility functions). 

This package functions both on builtin functionality and with =org-ql= clarity and speed improvements.

Finally, the same package could be done with =org-roam= and =org-roam-ql= (with some more work, could be faster (you might not need more speed than here though) since you can read from the database without having to parse files), but it mingles knowledge and task management (at least without setting some separating filters on database read). 
